What is Druta?

Druta (meaning, quick/swift/run in Sanskrit), is a runtime that executes abstract instructions on top of JS.

The objective of Druta is to simplify asynchronous programming that is very common while developing HTML5 applications.

Druta allows a developer to write Javascript code in a synchronous way and executes it on the Javascript runtime on the browser. 
This also can run on server side JS systems like node.js.

* Druta has 2 broad sub systems:

(a) Druta Compiler: This takes the input as a JS source function object, parses it to ast, transforms the ast to another tree, generates Druta executable code
(b) Druta Runtime:  This takes the Druta executable code, sequences the different instructions for execution and executes them on JS runtime

This work uses the Uglify JS parser and Tree walker: https://github.com/mishoo/UglifyJS by Mihai Bazon, thanks much Mihai!

* Supported Methods:

1. compile(jsSourceFunction) - this methods accepts a function written in JS as input, generates the Druta executable code as output and returns it
2. run(jsSourceFunction) - performs the compile step and also executes
3. run(drutaExecutable) - this method accepts a druta executable code as input generated by the compile step and executes it. 
   It returns 0 if the input is a JS source or an array, otherwise it returns -1
   
* Typical usage:

Pattern 1: compile first and then run 
	d = new Druta(pass_your_callback_function_here);
	code = d.compile(function test() { //your druta application code here });
	d.run(code); 
	
Pattern 2: Compile and run in 1 step
	d = new Druta(pass_your_callback_function_here);
	d.run(function test() { //your druta application code here });

Druta supports two styles of specifying asynchronous functions.

Asynchronous functions may invoke callbacks on success or on error executing separate callback functions. 

For instance, Apache Cordova is a JavaScript library for mobile application development that uses this pattern as below:

	navigator.camera.getPicture( cameraSuccess, cameraError, [ cameraOptions ] );

In the above example, cameraSuccess and cameraError are the callback functions that the developer needs to provide that will be invoked by Apache Cordova on success and fail respectively.

In Druta, the developer specifies a callback function when he/she creates a new Druta object and thereafter just uses the keywords $$success and $$fail to specify success and error callbacks.

Thus, to invoke the Cordova example using Druta, one may write:

navigator.camera.getPicture( $$success, $$fail, [ cameraOptions ] );

Here $$success and $$fail callback routines are automatically generated by Druta.

For those developers who prefer to write a single callback that can be invoked with a return code for both success and error, Druta provides a keyword $$callBack.

Using this developers can write asynchronous functions that invoke single callback, for instance:

returnValue = asyncEcho($$callBack, 1000, "hello world!");

In the above example asyncEcho is a simulated asynchronous function that takes 3 arguments: callBack function, time in milli seconds and the variable to be echoed.

* Full Example:  samples/helloworld.html 
<html>
	<head>
		<script src="../parse-js.js"></script>
		<script src="../process-ast.js"></script>
		<script src="../SyncToAsyncEvaluator.js"></script>
		<script src="../Druta.js"></script>
		<script src="../simulator/SimulatedAsyncCalls.js"></script>
		<script language="JavaScript">
			var druta;			
			function init()
			{
				druta = new Druta(
					function(e, ret){
						//alert(ret);
						console.log("after async execution everything completed");
					}
				);
			}

			function hello()
			{
				var fn = druta.run(function test() {
						alert(asyncEcho1(1000, $$callBack, "From Druta: Hello World!"));
					}							
				);								
			}
		</script>
	</head>
	<body onload = "init()">
		<input type="button" value="Hello World" onclick="hello()" />
	</body>
</html>

**Please see the sample code in testdruta.html to get started. This file has the samples for a few Javascript constructs **

** Note:

This is a very basic version that we have uploaded to get started with basic functions. Over the next several weeks we intend to complete the functionality as well as clean up the code.

Features that are included in this version are:

* Local variable declaration
* Unary expressions
* Binary expressions
* Assignment
* if and if else statement
* for loop

What is not included in this release?

* All other constructs of JavaScript such as functions, switch statements, arrays etc.

**